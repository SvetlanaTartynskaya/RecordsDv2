import io
import pandas as pd
import os
from datetime import datetime
import sqlite3
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler

logger = logging.getLogger(__name__)

class MeterValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤"""
    
    def __init__(self):
        self.equipment_df = None
        self.conn = sqlite3.connect('Users_bot.db', check_same_thread=False)
        self.cursor = self.conn.cursor()
        self.load_equipment()

    def load_equipment(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        try:
            self.equipment_df = pd.read_excel('Equipment.xlsx')
            # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
            self.equipment_df.columns = [col.strip() for col in self.equipment_df.columns]
            logger.info("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {e}")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            self.equipment_df = pd.DataFrame(columns=[
                '–õ–æ–∫–∞—Ü–∏—è', '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', '–ì–æ—Å. –Ω–æ–º–µ—Ä', '–ò–Ω–≤. ‚Ññ', 
                '–°—á—ë—Ç—á–∏–∫', '–¢–∏–ø —Å—á–µ—Ç—á–∏–∫–∞'
            ])

    def _get_equipment_for_location_division(self, location, division):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
        try:
            if self.equipment_df is None or self.equipment_df.empty:
                self.load_equipment()
            
            if self.equipment_df.empty:
                logger.warning("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç")
                return pd.DataFrame()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é
            mask = (
                (self.equipment_df['–õ–æ–∫–∞—Ü–∏—è'] == location) & 
                (self.equipment_df['–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'] == division)
            )
            result_df = self.equipment_df[mask].copy()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(result_df)} –µ–¥–∏–Ω–∏—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {location} –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {division}")
            return result_df
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏/–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}")
            return pd.DataFrame()
    
    def _get_last_reading(self, inv_num, meter_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞"""
        try:
            self.cursor.execute('''
                SELECT reading, reading_date
                FROM meter_readings_history
                WHERE inventory_number = ? AND meter_type = ?
                ORDER BY reading_date DESC
                LIMIT 1
            ''', (inv_num, meter_type))
            
            result = self.cursor.fetchone()
            if result:
                return {
                    'reading': result[0],
                    'reading_date': result[1]
                }
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è: {e}")
            return None
        
    def handle_ubylo_status(self, inv_num: str, meter_type: str, user_info: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ '–£–±—ã–ª–æ' —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
            self.cursor.execute('''
                SELECT location, division FROM equipment 
                WHERE inventory_number = ? AND meter_type = ?
            ''', (inv_num, meter_type))
            equipment_info = self.cursor.fetchone()
            
            if not equipment_info:
                return {'status': 'error', 'message': '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
            
            equipment_location, equipment_division = equipment_info
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            admins = self.get_admin_for_division(equipment_division)
            
            if not admins:
                return {'status': 'error', 'message': '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'}
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            request_id = f"ubylo_{inv_num}_{meter_type}_{datetime.now().timestamp()}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.cursor.execute('''
                INSERT INTO pending_requests 
                (request_id, inv_num, meter_type, user_tab, user_name, location, division, status, timestamp)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (request_id, inv_num, meter_type, user_info['tab_number'], user_info['name'], 
                equipment_location, equipment_division, 'pending', datetime.now()))
            self.conn.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admin_keyboard = []
            for admin_tab, admin_name in admins:
                admin_keyboard.append([
                    InlineKeyboardButton(
                        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–ª—è {inv_num} ({meter_type})",
                        callback_data=f"confirm_ubylo_{request_id}"
                    ),
                    InlineKeyboardButton(
                        "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"reject_ubylo_{request_id}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(admin_keyboard)
            
            message = (
                f"üö® *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info['name']} –æ—Ç–º–µ—Ç–∏–ª –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∫–∞–∫ '–£–±—ã–ª–æ':\n"
                f"–ò–Ω–≤. ‚Ññ: {inv_num}\n"
                f"–°—á—ë—Ç—á–∏–∫: {meter_type}\n"
                f"–õ–æ–∫–∞—Ü–∏—è: {equipment_location}\n"
                f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {equipment_division}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å:"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            return {
                'status': 'pending',
                'request_id': request_id,
                'admins': admins,
                'message': message,
                'reply_markup': reply_markup
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ '–£–±—ã–ª–æ': {e}")
            return {'status': 'error', 'message': str(e)}
    
    def save_to_history(self, report_df, week_number):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É meter_readings_history"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            required_columns = ['–ì–æ—Å. –Ω–æ–º–µ—Ä', '–ò–Ω–≤. ‚Ññ', '–°—á—ë—Ç—á–∏–∫', '–ü–æ–∫–∞–∑–∞–Ω–∏—è', 
                            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–î–∞—Ç–∞', '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', '–õ–æ–∫–∞—Ü–∏—è', '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å']
            
            if not all(col in report_df.columns for col in required_columns):
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ—Ç—á–µ—Ç–µ")
                return False
                
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            data_to_insert = []
            for _, row in report_df.iterrows():
                data_to_insert.append((
                    row['–ò–Ω–≤. ‚Ññ'],
                    row['–°—á—ë—Ç—á–∏–∫'],
                    float(row['–ü–æ–∫–∞–∑–∞–Ω–∏—è']) if pd.notna(row['–ü–æ–∫–∞–∑–∞–Ω–∏—è']) else None,
                    row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] if pd.notna(row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']) else '',
                    row['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'],
                    row['–õ–æ–∫–∞—Ü–∏—è'],
                    row['–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'],
                    datetime.strptime(row['–î–∞–∞—Ç–∞'], '%Y-%m-%d %H:%M:%S') if isinstance(row['–î–∞—Ç–∞'], str) else row['–î–∞—Ç–∞'],
                    week_number,
                    datetime.now()
                ))
            
            # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
            self.cursor.executemany('''
                INSERT INTO meter_readings_history (
                    inventory_number, 
                    meter_type, 
                    reading, 
                    comment, 
                    user_name, 
                    location, 
                    division, 
                    reading_date, 
                    report_week, 
                    timestamp
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', data_to_insert)
            
            self.conn.commit()
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data_to_insert)} –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞–Ω–∏–π")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞–Ω–∏–π: {e}")
            self.conn.rollback()
            return False
    
    def _get_days_between(self, last_date_str):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏"""
        try:
            last_date = datetime.strptime(last_date_str, '%Y-%m-%d %H:%M:%S')
            now = datetime.now()
            delta = now - last_date
            return max(delta.days, 1)  # –ú–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏: {e}")
            return 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1 –¥–µ–Ω—å

    def get_admin_for_division(self, division):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            if not division:
                return []
                
            self.cursor.execute('''
                SELECT tab_number, name
                FROM Users_admin_bot
                WHERE division = ?
            ''', (division,))
            
            admins = self.cursor.fetchall()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –≤–µ—Ä–Ω–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if not admins:
                self.cursor.execute('''
                    SELECT tab_number, name
                    FROM Users_admin_bot
                ''')
                admins = self.cursor.fetchall()
                
            return admins
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}")
            return []
        
    def validate_file(self, file_path, user_info):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏
            readings_df = pd.read_excel(file_path)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –ø–æ–∫–∞–∑–∞–Ω–∏–π: {file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ['‚Ññ –ø/–ø', '–ì–æ—Å. –Ω–æ–º–µ—Ä', '–ò–Ω–≤. ‚Ññ', '–°—á—ë—Ç—á–∏–∫', '–ü–æ–∫–∞–∑–∞–Ω–∏—è', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']
            missing_columns = [col for col in required_columns if col not in readings_df.columns]
            if missing_columns:
                return {
                    'is_valid': False,
                    'errors': [f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}"]
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            equipment_df = self._get_equipment_for_location_division(
                user_info['location'],
                user_info['division']
            )
            
            errors = []
            warnings = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏
            for idx, row in readings_df.iterrows():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                equipment_mask = (
                    (equipment_df['–ì–æ—Å. –Ω–æ–º–µ—Ä'] == row['–ì–æ—Å. –Ω–æ–º–µ—Ä']) &
                    (equipment_df['–ò–Ω–≤. ‚Ññ'] == row['–ò–Ω–≤. ‚Ññ']) &
                    (equipment_df['–°—á—ë—Ç—á–∏–∫'] == row['–°—á—ë—Ç—á–∏–∫'])
                )
                
                if not equipment_df[equipment_mask].empty:
                    equipment = equipment_df[equipment_mask].iloc[0]
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø—É—Å—Ç—ã–µ, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    if pd.isna(row['–ü–æ–∫–∞–∑–∞–Ω–∏—è']) and pd.isna(row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']):
                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–±–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è, –ª–∏–±–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π "–í —Ä–µ–º–æ–Ω—Ç–µ", –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ
                    if str(row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']).strip() == "–í —Ä–µ–º–æ–Ω—Ç–µ" and pd.isna(row['–ü–æ–∫–∞–∑–∞–Ω–∏—è']):
                        last_reading = self._get_last_reading(row['–ò–Ω–≤. ‚Ññ'], row['–°—á—ë—Ç—á–∏–∫'])
                        if last_reading:
                            readings_df.at[idx, '–ü–æ–∫–∞–∑–∞–Ω–∏—è'] = last_reading['reading']
                            warnings.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–º–æ–Ω—Ç–µ")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
                    if not pd.isna(row['–ü–æ–∫–∞–∑–∞–Ω–∏—è']):
                        try:
                            value = float(row['–ü–æ–∫–∞–∑–∞–Ω–∏—è'])
                            if value < 0:
                                errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: –ü–æ–∫–∞–∑–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")
                                continue
                                
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                            last_reading = self._get_last_reading(row['–ò–Ω–≤. ‚Ññ'], row['–°—á—ë—Ç—á–∏–∫'])
                            if last_reading and value < last_reading['reading']:
                                errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: –ü–æ–∫–∞–∑–∞–Ω–∏–µ ({value}) –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ ({last_reading['reading']})")
                                continue
                                
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –î–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ PM - –Ω–µ –±–æ–ª–µ–µ 24 –≤ —Å—É—Ç–∫–∏
                            if row['–°—á—ë—Ç—á–∏–∫'].startswith('PM') and last_reading:
                                days_between = self._get_days_between(last_reading['reading_date'])
                                if days_between > 0:
                                    daily_change = (value - last_reading['reading']) / days_between
                                    if daily_change > 24:
                                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: –î–ª—è —Å—á–µ—Ç—á–∏–∫–∞ PM –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (24 –≤ —Å—É—Ç–∫–∏). –¢–µ–∫—É—â–µ–µ: {daily_change:.2f}")
                                        continue
                                        
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –î–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ KM - –Ω–µ –±–æ–ª–µ–µ 500 –≤ —Å—É—Ç–∫–∏
                            if row['–°—á—ë—Ç—á–∏–∫'].startswith('KM') and last_reading:
                                days_between = self._get_days_between(last_reading['reading_date'])
                                if days_between > 0:
                                    daily_change = (value - last_reading['reading']) / days_between
                                    if daily_change > 500:
                                        errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: –î–ª—è —Å—á–µ—Ç—á–∏–∫–∞ KM –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (500 –≤ —Å—É—Ç–∫–∏). –¢–µ–∫—É—â–µ–µ: {daily_change:.2f}")
                                        continue
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ Excel
                            if not file_path.lower().endswith(('.xlsx', '.xls')):
                                return {'is_valid': False, 'errors': ["–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx, .xls)"]}
                        
                        except ValueError:
                            errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                            continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    if not pd.isna(row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']):
                        valid_comments = ["–í —Ä–µ–º–æ–Ω—Ç–µ", "–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω", "–£–±—ã–ª–æ", "–ù–µ—Ç –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏"]
                        if str(row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']).strip() not in valid_comments:
                            errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(valid_comments)}")
                else:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}: –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ì–æ—Å. –Ω–æ–º–µ—Ä: {row['–ì–æ—Å. –Ω–æ–º–µ—Ä']}, –ò–Ω–≤. ‚Ññ: {row['–ò–Ω–≤. ‚Ññ']}, –°—á—ë—Ç—á–∏–∫: {row['–°—á—ë—Ç—á–∏–∫']})")
            
            if errors:
                return {
                    'is_valid': False,
                    'errors': errors,
                    'warnings': warnings
                }
            
            return {
                'is_valid': True,
                'warnings': warnings
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return {
                'is_valid': False,
                'errors': [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"]
            }
    
    
    def generate_final_report(self, week_folder):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
        report_data = []
        week_number = os.path.basename(week_folder).replace('week_', '')
        
        for filename in os.listdir(week_folder):
            try:
                df = pd.read_excel(f"{week_folder}/{filename}")
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
                user_info = {
                    'name': df['name'].iloc[0] if 'name' in df.columns else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'location': df['location'].iloc[0] if 'location' in df.columns else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'division': df['division'].iloc[0] if 'division' in df.columns else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'timestamp': df['timestamp'].iloc[0] if 'timestamp' in df.columns else datetime.now()
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç—á–µ—Ç
                for _, row in df.iterrows():
                    report_data.append({
                        '–ì–æ—Å. –Ω–æ–º–µ—Ä': row['–ì–æ—Å. –Ω–æ–º–µ—Ä'],
                        '–ò–Ω–≤. ‚Ññ': row['–ò–Ω–≤. ‚Ññ'],
                        '–°—á—ë—Ç—á–∏–∫': row['–°—á—ë—Ç—á–∏–∫'],
                        '–ü–æ–∫–∞–∑–∞–Ω–∏—è': row['–ü–æ–∫–∞–∑–∞–Ω–∏—è'],
                        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] if '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' in row else '',
                        '–î–∞—Ç–∞': user_info['timestamp'],
                        '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ': user_info['division'],
                        '–õ–æ–∫–∞—Ü–∏—è': user_info['location'],
                        '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': user_info['name']
                    })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
                continue
        
        if not report_data:
            return None
        
        report_df = pd.DataFrame(report_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.save_to_history(report_df, week_number)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
        output = io.BytesIO()
        report_df.to_excel(output, index=False)
        output.seek(0)
        
        return output